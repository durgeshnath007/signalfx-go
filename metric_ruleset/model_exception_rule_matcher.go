/*
Metric Ruleset API

 Metric ruleset API 

API version: 3.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metric_ruleset

import (
	"encoding/json"
)

// ExceptionRuleMatcher Finds the metric to reroute. 
type ExceptionRuleMatcher struct {
	// Metric component to apply filters for. The only supported metric component is \"dimension\".  
	Type string `json:"type"`
	// List of filters to apply to your metric.  
	Filters []PropertyFilter `json:"filters"`
}

// NewExceptionRuleMatcher instantiates a new ExceptionRuleMatcher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExceptionRuleMatcher(type_ string, filters []PropertyFilter) *ExceptionRuleMatcher {
	this := ExceptionRuleMatcher{}
	this.Type = type_
	this.Filters = filters
	return &this
}

// NewExceptionRuleMatcherWithDefaults instantiates a new ExceptionRuleMatcher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExceptionRuleMatcherWithDefaults() *ExceptionRuleMatcher {
	this := ExceptionRuleMatcher{}
	return &this
}

// GetType returns the Type field value
func (o *ExceptionRuleMatcher) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExceptionRuleMatcher) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ExceptionRuleMatcher) SetType(v string) {
	o.Type = v
}

// GetFilters returns the Filters field value
func (o *ExceptionRuleMatcher) GetFilters() []PropertyFilter {
	if o == nil {
		var ret []PropertyFilter
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *ExceptionRuleMatcher) GetFiltersOk() ([]PropertyFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *ExceptionRuleMatcher) SetFilters(v []PropertyFilter) {
	o.Filters = v
}

func (o ExceptionRuleMatcher) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExceptionRuleMatcher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["filters"] = o.Filters
	return toSerialize, nil
}

type NullableExceptionRuleMatcher struct {
	value *ExceptionRuleMatcher
	isSet bool
}

func (v NullableExceptionRuleMatcher) Get() *ExceptionRuleMatcher {
	return v.value
}

func (v *NullableExceptionRuleMatcher) Set(val *ExceptionRuleMatcher) {
	v.value = val
	v.isSet = true
}

func (v NullableExceptionRuleMatcher) IsSet() bool {
	return v.isSet
}

func (v *NullableExceptionRuleMatcher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExceptionRuleMatcher(val *ExceptionRuleMatcher) *NullableExceptionRuleMatcher {
	return &NullableExceptionRuleMatcher{value: val, isSet: true}
}

func (v NullableExceptionRuleMatcher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExceptionRuleMatcher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


